#< lib/ans-core.okf
#< lib/ans-core-ext.okf
#< lib/posix.okf

\ Test out POSIX-FORK (with the help of POSIX-SIGACTION, POSIX-PAUSE
\ and POSIX-KILL).
\ Does so by forking the process.  The child process installs
\ handler for SIGINT and then pauses.  The parent process sleeps
\ for 5 seconds and then sends a SIGINT to the child, sleeps another
\ 5 seconds and then sends a SIGKILL to the child.
\
\ Run it by doing
\
\  $ ./okf test/test-posix-fork.okf
\  parent
\  child
\  caught signal 2
\  child again
\  $ 


\ ( -- n )
\ The argument to a signal handler comes through on %esp, so 
\ the following copies it from there to the parameter stack.
\ See bib.linux.sig.handler.

#: SIG#  0824448B , 83FC4589 , 00C304ED ,

#!   8b 44 24 08     movl okf_cell_size(%esp), %eax
#!   89 45 FC        movl %eax, -okf_cell_size(%ebp)
#!   83 ED 04        subl $okf_cell_size, %ebp
#!   C3              ret


\ The simple handler.  All it does is print out a message and then
\ return.  Note that ." and CR use go direct to system calls so it
\ it is safe to use them in a signal handler.

: HANDLER ." caught signal " SIG# . CR ;

CREATE ACTION POSIX-SIGACTION-SIZE ALLOT

' HANDLER ACTION POSIX-SIGACTION-SA-HANDLER + !
0         ACTION POSIX-SIGACTION-SA-MASK    + !
0         ACTION POSIX-SIGACTION-SA-FLAGS   + !


: INSTALL 0 ACTION POSIX-SIGINT POSIX-SIGACTION
            ABORT" could not install SIGINT handler" ;

CREATE DELAY POSIX-TIMESPEC-SIZE ALLOT
5 DELAY POSIX-TIMESPEC-TV_SEC  + !
0 DELAY POSIX-TIMESPEC-TV_NSEC + !

: SLEEP    ( -- )     0 DELAY POSIX-NANOSLEEP ABORT" bad sleep" ;
: INTERUPT ( pid -- ) POSIX-SIGINT SWAP POSIX-KILL ABORT" bad interupt" ;
: KILL     ( pid -- ) POSIX-SIGKILL SWAP POSIX-KILL ABORT" bad kill" ;

: PARENT ( pid -- ) ." parent" CR SLEEP DUP INTERUPT SLEEP KILL ;
: CHILD  ( -- )     ." child" CR INSTALL POSIX-PAUSE DROP 
                    ." child again" CR
                    POSIX-PAUSE DROP ;

: MAIN POSIX-FORK DUP IF PARENT ELSE DROP CHILD THEN ;

MAIN
